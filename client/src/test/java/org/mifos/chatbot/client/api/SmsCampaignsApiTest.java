/**
 * Copyright 2018 Dingfan Zhao
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.mifos.chatbot.client.api;

import org.mifos.chatbot.client.ApiException;
import org.mifos.chatbot.client.model.CommandWrapper;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmsCampaignsApi
 */
@Ignore
public class SmsCampaignsApiTest {

    private final SmsCampaignsApi api = new SmsCampaignsApi();

    
    /**
     * Create a SMS Campaign
     *
     * Mandatory Fields campaignName, campaignType, triggerType, providerId, runReportId, message  Mandatory Fields for Cash based on selected report id paramValue in json format
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignTest() throws ApiException {
        CommandWrapper body = null;
        String response = api.createCampaign(body);

        // TODO: test validations
    }
    
    /**
     * Delete a SMS Campaign
     *
     * Note: Only closed SMS Campaigns can be deleted
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        Long campaignId = null;
        String response = api.delete(campaignId);

        // TODO: test validations
    }
    
    /**
     * SMS Campaign
     *
     * Activates | Deactivates | Reactivates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void handleCommandsTest() throws ApiException {
        Long campaignId = null;
        String command = null;
        String response = api.handleCommands(campaignId, command);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void previewTest() throws ApiException {
        String body = null;
        String response = api.preview(body);

        // TODO: test validations
    }
    
    /**
     * List SMS Campaigns
     *
     * Example Requests:  smscampaigns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllCampaignsTest() throws ApiException {
        String sqlSearch = null;
        Integer offset = null;
        Integer limit = null;
        String orderBy = null;
        String sortOrder = null;
//        String response = api.retrieveAllCampaigns(sqlSearch, offset, limit, orderBy, sortOrder);

        // TODO: test validations
    }
    
    /**
     * Retrieve a SMS Campaign
     *
     * Example Requests:  smscampaigns/1 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCampaignTest() throws ApiException {
        Long resourceId = null;
        String response = api.retrieveCampaign(resourceId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a SMS Campaign
     *
     * Example Requests:  smscampaigns/1   smscampaigns/1?template&#x3D;true   smscampaigns/template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateTest() throws ApiException {
        String response = api.template();

        // TODO: test validations
    }
    
    /**
     * Update a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignTest() throws ApiException {
        Long campaignId = null;
        CommandWrapper body = null;
        String response = api.updateCampaign(campaignId, body);

        // TODO: test validations
    }
    
}
